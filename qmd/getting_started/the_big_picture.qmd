---
title: "The Big Picture"
---

Now that we have completed our set up, let's dive right into programming with `R`. In this chapter, we will go through a "mini-project" with very basic data, which follows a possible workflow when working with data in `R`. We will install and load packages, load data, perform some operations on this data, calculate some summary statistics and plot them. In later chapters we will go into a little more detail for each topic, so don't worry if you don't understand something quite yet, it will be covered again. The goal of this chapter is to simply give you an idea of what is possible in R, before dealing with the specifics.

## Packages

[Packages](../packages/packages.qmd) are extensions to the `base R` you get by default. Let's install a package collection, that makes it easier to work with data in R:

```{r install_tidyverse, eval = FALSE}
install.packages("tidyverse")
```

The [`tidyverse`](../basics/tidyverse.qmd) is a collection of packages following a common philosophy, and facilitating many aspects of coding in R. We will use functions from `base R` and from the `tidyverse`. However, as I personally find them a bit more intuitive in many cases, we will use `tidyverse` functions a lot in the current chapter, so you can quickly get an insight into what is possible with R.

::: tidy
```{r}
# tidyverse code will be marked like this.
```
:::

Just by installing the packages, we can't use them. We also have to load them into our R session:

```{r load_packages}
library(tidyverse)
```

## Load Data

Data is [loaded into R](../load_data/load_data.qmd) so you can work with it. For this chapter, we are going to use the data set [`babynames`](https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-03-22/readme.md), which we can find on the [`tidytuesday`](https://github.com/rfordatascience/tidytuesday) site. I have already tweaked the data set a bit, so download it from [here](https://github.com/nickhaf/r_tutorial/tree/main/raw_data) to follow along. Right-click on the respective data set found under this link, select 'save as' and then choose a folder on your notebook where to save it. We have talked about where that optimally should be in [Workflow: Exercises](../workflow/workflow_exercise.qmd). Our goal is to look at the most common name in every year and make a nice plot out of it.

So, after downloading it and saving it in the folder `raw_data` within my project directory, I can load the data set into R with:

```{r, echo = FALSE}
babynames <- read.csv(here::here("raw_data", "babynames.csv"))
```

```{r, eval = FALSE}
babynames <- read.csv("./raw_data/babynames.csv")
```

This will load the data into R and assigning it the name `babynames` by using the `<-`. You can see the data popping up in your `Environment` pane on the upper right. Note that the file path might differ on your device, depending on where you saved your data.

## Take a look

Now that we have our data loaded safely into R, we can [get an overview](../peeking/peeking.qmd) with a multitude of commands. One of the most important ones might be `head()`, which will give us the first few rows of the data:

```{r}
head(babynames)
```

Especially for bigger data sets, it might be more feasible to only look at the structure and not the whole data set:

```{r}
str(babynames)
```

On the left we can see the columns of this data frame, named `year`, `sex`, `names`, and `ID`. On the right we see the first values in each column, for example `1880`, `1880`, `1880`, `NA` etc ... in the `year`-column.

So, what we can infer from the data and its online description is that it contains the most common names for boys and girls in the USA for each year since `1880`.

## Merging

Sadly the data is not complete. If we had the number of people born with a specific name for every year, we could find out which name was the most common each year. However, the number of people is missing from our data (ok, i split it up for illustrative purposes). So let's [download](https://github.com/nickhaf/r_tutorial/tree/main/raw_data) it and load it into R:

```{r, echo = FALSE}
babynames_n <- read.csv(here::here("raw_data", "babynames_n.csv"))
```

```{r , eval = FALSE}
babynames_n <- read.csv("./raw_data/babynames_n.csv")
```

Now we can [merge](../merging/merging.qmd) it with our other data set by the `ID` column:

```{r}
babynames_merged <- merge(babynames, 
                          babynames_n, 
                          by = "ID")

head(babynames_merged)
```

Great, now we can see the number of people born with that name in each year since 1880, and the propability that they get this specific name, calculated from the total of births in this year!
But hold on! The column `years` seems to include missing values (`NA's`). It is always a good idea to at least think about the [missing values](../missing/missing.qmd) before doing any analyses, so let's do just that:

## Missings

There are multiple ways to deal with [missing values](../missing/missing.qmd). For reasons of simplicity, we will just remove any rows that contain `NA's`. We can achieve that very easily using the function `na.omit()`:

```{r}
babynames_merged <- na.omit(babynames_merged)
head(babynames_merged)
```


## Subsetting data

One very important part of working with data in R is the [subsetting](../subsetting/subsetting.qmd) of data. This means we select specific values from a data set. Let's suppose we want to only look at the female names in this data set:

::: tidy
```{r}
babynames_F <- babynames_merged %>%
  filter(sex == "F")
```
:::
Wondering what the `%>%` means? That's a [pipe operator](https://nickhaf.github.io/r_tutorial/qmd/basics/tidyverse.html#the-pipe-operator), which is used, mainly in the `tidyverse`, to connect multiple function calls. This can make code a lot more readable. In our case, we start with the `babynames_merged` data frame and then perform an operation on it, in this case filtering specific values.

## Adding a new column

Now, we want to plot the percentages of each name, instead of the probability, because it looks a bit more intuitive. So, let's [build a new column](https://nickhaf.github.io/r_tutorial/qmd/getting_started/the_big_picture.html#adding-a-new-column) named `percentage`, which is just the `prop` column multiplied by `100`:

```{r}
babynames_F$percentage <- babynames_F$prop * 100
head(babynames_F)
```

## Selecting columns

Now we can trim down our data set a bit more and [select](https://nickhaf.github.io/r_tutorial/qmd/subsetting/subsetting.html#columns-tidyverse) only the columns we are actually going to need:

::: tidy
```{r}
babynames_F <- babynames_F %>%
  select(year, name, percentage)
head(babynames_F)
```
:::

## Some additional summary statistics

Now, the next part can show you how easy it can be to deal with data in R. It's `tidyverse` specific syntax, so don't worry about it to much for now.  

First, let's group our data according to year:

::: tidy
```{r}
babynames_F_grouped <- group_by(babynames_F, year)
```
:::

Any operations we now perform are performed by year, and not on the whole data set at once. In our case, we want to find the most common name each year, which is the name with the maximum `percentage`. With `slice_max(percentage)` we can extract the row with the highest percentage in each group: 

::: tidy
```{r}
babynames_F_max <- babynames_F_grouped %>%
  slice_max(percentage)

head(babynames_F_max)
```
:::

Now our data frame contains only the most common name for each year. 

At the moment we only want to get an idea what R can do, so don't hold up if some of the functions are not that clear to you right now, hopefully that will change throughout this tutorial.

## Plot the data

We will use the package `ggplot2` (which is also part of the `tidyverse`) for [plotting our data](../plotting/plotting.qmd). It should be mentioned that `Base R` also has some powerful plotting functions, however, `ggplot2` makes it very easy to build complex and beautiful plots.

A `ggplot` is constructed from multiple layers, that can be laid over each other using the `+` operator.

We start with the function `ggplot()`, in which we define our data and the x and y axes. This will draw our (empty) coordinate system. 
We have to use the [`aes()`]() (aesthetics) function for everything that changes in relation to the data. For example, the exact location of each element in the plot is dependent on the x and y position deposited in the data frame, so we have to specify our axes inside the `aes()` function: 

::: tidy
```{r}
#| fig-height: 8
#| fig-width: 11
#| 
p <- ggplot(
  data = babynames_F_max,
  aes(
    x = year,
    y = percentage)
  )
p
```

Now that we have defined our aesthetics, we can add a [`geom`-layer]. This will make use of the data we have defined in `ggplot()` and plot some bars for us:

```{r}
#| fig-height: 8
#| fig-width: 11

p +
  geom_col()
```

We can also define different colors for different groups. For example, if we want the bars to get filled with a color corresponding to the name they are representing, we can do that:

```{r}
#| fig-height: 8
#| fig-width: 11

p <- p +
  geom_col(aes(fill = name))
p

```
If we wanted all bars to have the same color, we would have specified the `fill` argument **outside** of the `aes()` function, because in that case, it wouldn't have to change in dependence of our data. 
We could also have defined our `fill` argument in the `aes()` function we have defined in `ggplot()`. In that case, it would have influenced all `geom_()` functions. Because we defined it in `geom_col()`, it only influences this `geom_col()` call.


Let's give the axes some more informative names and a title to the plot:

```{r}
#| fig-height: 8
#| fig-width: 11

p <- p +
  ggtitle("Most common female name in the United States of America by year") +
  xlab("Birthyear") +
  ylab("Percentage of children given that name")
p
```

Finally, to style the plot a bit, let's add a predefined theme and a color palette:

```{r}
#| fig-height: 8
#| fig-width: 11

p +
  theme_bw() + # Theme
  scale_fill_brewer(palette = "Spectral") # Color palette

```
:::

We would have many more options to style this plot further (for example we could sort the names in the legend by order of appearance), but let's keep it at that for now.

## Conclusion

In this tutorial we have learned that R is a flexible tool for editing and plotting data. Of course, we barely scratched the surface. Therefore, we want to dive a bit deeper into each step. Either follow the course, or navigate to the chapters you are most interested in. But first, take a look at the new data sets you will be working with throughout the exercises.
