---
title: "Merging data"
---

```{r, echo = FALSE, message = FALSE}
source(here::here("output_hook.R"))
```

::: {.callout-caution icon="false" collapse="true"}
## Previous code

```{r}
# install.packages("tidyverse")
# install.packages("here")

library(tidyverse)
library(here)

athletes <- readRDS(file = here::here("raw_data", "athletes.rds"))
```
:::

## Data set

In the end, we want to plot the number of gold medals the countries have won on a world map. To do that, we need a data set containing coordinates of the different countries. Luckily, `ggplot2` (part of the `tidyverse`) provides a fitting data set. Let's [download](https://github.com/nickhaf/r_tutorial/tree/main/raw_data) it and load it into R:

```{r}
world_coordinates <- readRDS(file = here::here("raw_data", "world_coordinates.rds"))
```

## Before merging

Right now, we have multiple rows for each country in both data sets. This will not be merge easily, so we have to reduce our athletes data first. As you know, our goal is to plot the number of gold medals each country has won. So, we need to calculate how many gold medals each country has won in total. Let's do that quickly, using some `tidyverse` functions. It is not especially important you understand and know everything that happens here, but we need it for the next chapters, so here it goes:

::: tidy
```{r}
medal_counts <- athletes %>%
  filter(Medal == "Gold") %>%
  group_by(Region) %>%
  count(Medal) 

medal_counts
```
:::

What happens here? We extract all rows containing gold medals, group them by region, so our next operation is performed region wise, and not for the whole data set. Then we count how many gold medals each region got.

## Merging

To merge two data frames that include information that belongs together, we need a common column, on which we can combine them. In our case, this is the column containing the country. They are both named `region`, but one with an upper case `R`. This doesn't pose a problem, as we can define which columns should be taken from which data frame for merging. Let's take a quick look before merging to check if there are any countries named differently in both data sets (this simply combines commands we have already looked at in the [Basic operations chapter](https://nickhaf.github.io/r_tutorial/qmd/basics/basics.html#comparisons-and-logical-operators):

```{r}
medal_counts$Region[!(medal_counts$Region %in% world_coordinates$region)]
```

Looks like all of the countries in our `medal_countries` data frame can be also found in our `world_coordinates` frame. Only athletes without a country will be lost when merging, but that's ok for now, as we are interested in the country specific gold medal counts. So let's merge:

```{r}
medal_countries <- merge(
  x = medal_counts,
  y = world_coordinates,
  by.x = "Region",
  by.y = "region",
  all.x = FALSE,
  all.y = TRUE
)

head(medal_countries)

```

Note that we also used the `all.x` and `all.y` arguments. In this example, we want to take all rows from the second data set, but only those from the first data set, that have a match in the second data set. This is necessary, because we want to plot all countries later on, but only those we have coordinates for, because they won't show up on the map otherwise.

We can also use the tidyverse for this operation. In order to do that, we first have to rename our region column, as the column names need to be the same over both data sets that are merged. `left_join()` means that we will merge onto the first data set (world_coordinates in the code below), like we have done using the `all.x` and `all.y` arguments in the `merge()` function.

::: tidy
```{r}
medal_countries <- world_coordinates %>%
  rename("Region" = region) %>%
  left_join(medal_counts)

head(medal_countries)
```
:::

Great! Now the information that belongs together is stored together.
