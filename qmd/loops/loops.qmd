---
title: "Loops and conditions"
---

```{r, echo = FALSE, message = FALSE}
source(here::here("output_hook.R"))
```

![](../pictures/loops.jpg)[^1]

[^1]: Image by [Tine Ivanic](https://unsplash.com/de/@tine999?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/de/fotos/u2d0BPZFXOY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText).

::: callout-note
This chapter is optional.
:::

::: {.callout-caution icon="false" collapse="true"}
## Previous code

```{r message = FALSE}
# install.packages("tidyverse")
# install.packages("here")

library(tidyverse)
library(here)

athletes <- readRDS(file = here::here("raw_data", "athletes.rds"))
```

::: tidy
```{r}
medal_counts <- athletes %>%
  filter(Medal == "Gold") %>%
  group_by(Region) %>%
  count(Medal) 
```
:::
:::

# For-loops

## Motivation

When programming, you often want to repeat an operation multiple times. For example, assume you want to print the number of gold medals for each country into your console. The most intuitive way would be to just copy paste the code with changed country names:

```{r}
print(
  paste0(
    medal_counts[medal_counts$Region == "Algeria", "n"], 
    " Olympic gold medalists are from ", 
    medal_counts[medal_counts$Region == "Algeria", "Region"], 
    ".")
  )

print(
  paste0(
    medal_counts[medal_counts$Region == "Argentina", "n"], 
    " Olympic gold medalists are from ", 
    medal_counts[medal_counts$Region == "Argentina", "Region"], 
    ".")
  )

print(
  paste0(
    medal_counts[medal_counts$Region == "Armenia", "n"], 
    " Olympic gold medalists are from ", 
    medal_counts[medal_counts$Region == "Armenia", "Region"], 
    ".")
  )

print(
  paste0(medal_counts[medal_counts$Region == "Australia", "n"], 
         " Olympic gold medalists are from ", 
         medal_counts[medal_counts$Region == "Australia", "Region"],
         ".")
  )

```

This could go on ...\
Here we paste together a sentence consisting of data and some pre specified character strings, which we then print into the console. However, this can become pretty tedious if we want to add more countries, and what if we want to change something in the print statement? In this case, we would have to go over all rows and change it multiple times. So, let's write a loop that does that automatically for us:

```{r}
for(i in unique(medal_counts$Region)){
  print(
    paste0(
      medal_counts[medal_counts$Region == i, "n"], 
      " Olympic gold medalists are from ", 
      i, 
      "." )
    )
}
```

So this little piece of code can do what we started to do in the above code section, but already for all countries. Also, if we want to change something, we only have to change it once.

::: callout-tip
In general, try not to repeat yourself when writing code. As a general rule of thumb, use loops and/or [functions](../functions/functions.qmd) if you need to copy/paste something more than two times.
:::

## How to write a for-loop?

Let's take a step back and look at what we are actually doing here. A `for loop` is generally constructed like this:

```         
for(counter in values){
  repeat something with changing counter
}
```

What does that mean? Let's look at a simple example first. We want to multiply the values from `10` to `20` with `100` and then print them into our console:

```{r}
for(i in 10:20){
  new_i <- i * 100
  print(new_i)
}
```

1.  In the first iteration, `i` takes the value of the first vector element behind `in`, which is `10`.
2.  The operation in the loop body gets executed, in this case the current value gets multiplied by `100` and then printed into the console.
3.  After the operation is finished, `i` takes the next value, in this case `11`, and the whole process starts again.
4.  The loop is finished after the operation on the last value has been executed, in this case `20`.

Let's get back to our initial example. Try to figure out what happens here by yourself. What is the first and the last value `i` gets assigned?

```{r}
for(i in unique(medal_counts$Region)){
  print(
    paste0(
      medal_counts[medal_counts$Region == i, "n"], 
      " Olympic gold medalists are from ", 
      i, 
      "." )
    )
}
```

In this example we don't loop over some numbers, but over the unique regions in our `medal_counts` data frame:

```{r}
unique(medal_counts$Region)
```

`i` takes each of these elements in turn, then the corresponding `n` value of each country gets extracted and pasted into some sentence. In this case, `i` takes the value `r unique(medal_counts$Region)[1]` in the first iteration, and `r unique(medal_counts$Region)[length(unique(medal_counts$Region))]` in the last iteration.

::: callout-tip
It should be noted that in general it is good practice to try avoiding for loops and use functions from the [apply-family](https://nicercode.github.io/guides/repeating-things/) instead, as `for-loops` allow you to write horrible code. Still, sometimes `for-loops` are the better option, depending on the use case. Also, their structure is pretty much the same over many programming languages.
:::

# Conditions

## If-else statement

Have you noticed that our output doesn't sound that correct if we only have one gold medal winner in a country?

`"1 Olympic gold medalists are from Mozambique."`

To solve this, we can add a conditional statement which only gets executed if some condition is met. This can be done by an `if else` statement:

```{r}
for(i in unique(medal_counts$Region)){
  n_medals <- medal_counts[medal_counts$Region == i, "n"]
  
  ## Execute only if the number of medal is equal to 1!
  if(n_medals == 1){
    print(
    paste0(
      "One Olympic gold medalist is from ", 
      i, 
      "." )
    )
  }else{
    ## In all other cases, do the following:
  print(
    paste0(
      n_medals, 
      " Olympic gold medalists are from ", 
      i, 
      "." )
    )
  }
}
```

Let's look at a more simple example to explain the concept:

```         
if(condition){
  do something
}else{
  do something else
}
```

For example:

```{r}
x <- 10

if(x < 100){
  x * 2
}else{
  x
}
```

Inside the `if()` we define our [condition](https://nickhaf.github.io/r_tutorial/qmd/basics/basics.html#comparisons-and-logical-operators). Then, inside the `{ }` we define an operation that gets executed, if this condition is met. Inside the `else{ }` part we define an operation that gets executed if the condition in `if()` is not met.

In our inital example we check if the number of gold medalists is equal to one. If that is the case, we print the specific statement. If not, we print the other.

We don't even need to define the `else{}` part if nothing should happen in case the `if()` condition is not met. 

## `ifelse()`

We can use this concept for adding new values conditionally to a data frame. For example, let's build a dichotomous variable to check which countries have equal to or more than `100` gold medal winners:

```{r}
medal_counts$n_100 <- ifelse(
 medal_counts$n >= 100,
  yes = TRUE,
  no = FALSE
)

head(medal_counts)
```

Note that the look of this `ifelse()` function is a bit different from our `if else statement`, but the logic behind it is exactly the same: Here we [add the new column](https://nickhaf.github.io/r_tutorial/qmd/data_structures/data_structures.html#adding-new-columns) `n_100` which gets filled with `TRUE` and `FALSE`. If the conditional statement `medal_counts$n >= 100`, which is the first argument of the `ifelse()` function, is met, the function returns a `TRUE`, if not a `FALSE`.
