---
title: "Subsetting"
---

```{r, echo = FALSE}
source(here::here("output_hook.R"))
```

::: {.callout-caution icon="false" collapse="true"}
## Previous code

```{r}
# install.packages("tidyverse")
# install.packages("here")

library(tidyverse)
library(here)

athletes <- readRDS(file = here::here("raw_data", "athletes.rds"))
```
:::

Subsetting means extracting smaller sets of data from a bigger data set. For example, we can extract specific rows from a data frame, or specific values from a vector. Let's take a look at how that is done in R:

## Data frames

In `R` we use square brackets `[,]` to extract specific rows and columns.

### Rows

In front of the `,` we write the **rows** we want to extract:

```{r, output.lines=4}
# Extract the first and the fourth row
athletes[c(1, 4), ]
```

### Columns

Behind it the **columns**:

```{r, output.lines=4}
# Extract the second and the fourth column:
athletes[, c(2, 4)]

# Extract the columns by name:
athletes[, c("Year", "Sport")]

# Or only the column Year (and turn it into a vector right away):
athletes$Year
```

::: callout-tip
Always use column names instead of position if possible. This way, your code will still work if the column position changes.
:::

### Rows & Columns

And of course we can combine both calls:

```{r, output.lines=4}
athletes[c(1, 4), c(2, 4)]

athletes[c(1, 4), c("Year", "Sport")]
```

We can also use Boolean values (every row/column must get a value here, so we extract the first 100 rows by repeating `TRUE` 100 times, and than add `FALSE` for the remaining rows):

```{r}
str(athletes[c(rep(TRUE, 100), rep(FALSE, 271016)), ])
```

::: callout-tip
Instead of writing `271016` we should actually use the current row number, in case that changes as well:

```{r}
str(athletes[c(rep(TRUE, 100), rep(FALSE, nrow(athletes) - 100)), ])
```
:::

### Conditional filtering

Now the stuff we looked at in [logical operators](../basics/basics.qmd#comparisons-and-logical-operators) comes in handy! We can filter rows which match some condition. For example, we might want to look at all athletes from Germany:

```{r output.lines = 10}
athletes[athletes$Team == "Germany", ]

```

::: {.callout-note collapse="true"}
## Unfold if you want to take a closer look at what's happening here

Take a close look at the comparison before the `,`:

```{r, output.lines=4}
athletes$Team == "Germany"
```

`athletes$Team` is a vector, so comparing its values to a specified value yields a logical vector with the respective `TRUE` and `FALSE` values. We can insert this logical vector in front of the `,` to extract all rows corresponding to that condition.
:::

If we want to extract multiple nationalities at once, we need the `%in%` operator:

```{r, output.lines = 10}
athletes[athletes$Team %in% c("Kenya", "Norway"), ]

```

By the way, if we want to save our extracted data frame, we can assign it a new name (otherwise it will only get printed into the console, but we can't go on working with it):

```{r, output.lines = 10}
athletes_team <- athletes[athletes$Team %in% c("Kenya", "Norway"), ]
head(athletes_team)
```

We can also combine multiple logical vectors using [`&` ("and") and `|` ("or")](https://nickhaf.github.io/r_tutorial/qmd/basics/basics.html#or-and-and). For example, we might want to look at all german athletes before the year 2000:

```{r}
athletes_2 <- athletes[athletes$Team == "Germany" & athletes$Year < 2000, ]
head(athletes_2)
```

Or at all judo athletes weighting over 100 or under 50 kg:

```{r}
athletes_3 <- athletes[(athletes$Sport == "Judo") & (athletes$Weight > 100 | athletes$Weight < 50), ]
head(athletes_3)
```

Hmm, that looks a bit weird. Some rows only contain `NA` values. That's because there are [missing values](../missing/missing.qmd) in the `Weight` column. We will look at that closer in the [missings chapter](../missing/missing.qmd) and ignore that problem for now.

In the long run, always having to specify the name of the data frame for each column or row with condition can become a bit annoying and clutters the code. Also this code leaves all rows with missing values...\
Instead, we can use the `filter()` function from the tidyverse:

### Rows: Tidyverse

::: tidy
```{r, message = FALSE, output.lines=4}
library(tidyverse)

athletes %>%
  filter(Sport == "Judo", (Weight > 100 | Weight < 50))
```
:::

Note how we can just write our conditions without connecting them with `&` (`filter()` does that automatically for us). Also, we don't have to put the column names into `""`, because `filter()` knows that this are column names of the `athletes` data frame, which makes coding a bit more pleasant. And finally, missing rows are automatically removed, which makes sense in many cases!

### Columns: Tidyverse

For extracting columns, we need `select()`:

::: tidy
```{r, output.lines=4}
athletes %>%
  select(Year, Sport)
```
:::

## Vectors

Let's take a quick look at how to extract elements from a vector, which shouldn't be a problem after already dealing with data frames. It's pretty straight forward: we just put the position of the element we want to extract behind the vector in square brackets (without a `,`, as we only have a one dimensional object). Let's quickly define a vector for illustration:

```{r}
vec_sport <- athletes$Sport # remember: `$` returns a vector
```

And look at the second element:

```{r}
vec_sport[2]
```

Of course we can also do that for multiple elements:

```{r}
vec_sport[c(2, 3, 4)]
## Or, less to write:
vec_sport[2:4]
```

Another way would be to provide a logical vector, which defines for each position if we want to extract the element or not (like we already did for data frames):

```{r, output.lines=4}
vec_sport[c(rep(TRUE, 100), rep(FALSE, 65))]
```

## Lists

When subsetting lists we have two options:

```{r}
# Define an example list:
show_list <- list(
  "TV-Show" = c("Friends", "How I Met Your Mother"),
  "dat" = data.frame(
    "name" = c("Monica", "Ted"),
    "age" = c(24, 27)
  )
)
```

1.  We can extract a list element. This is done by single square brackets:

```{r}
str(show_list[2])
```

Note how the result is still a `list`? It's like taking out a drawer from a closet, but keeping the content inside this drawer.

2.  We can extract the element that is stored inside the list element. This is done by double square brackets:

```{r}
str(show_list[[2]])
```

Here the result is the `data frame` that was saved inside the list. It's like taking the content out of the drawer.
