# Basic Operations

Let's take a quick look at the most important basic operations in R. You can also use a [cheat sheet](https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf) to keep an overview during the course.

## Basic Mathematical Operations

We can use R as a calculator:

```{r, eval = FALSE}
(1 + 2) * 3^2
2 - 3/log(8)
```

## Assignment Operator

We can create objects in R by using the assignment operator `<-`, which assigns a value to an object:

```{r}
## Assign the result of 1 + 1 to the object 'result':
result <- 1 + 1
result

## Assign the result of the comparison to the object 'log_result':
log_result <- 10 > 1
log_result
```

## Combination of Elements

We can combine multiple elements to build a new one:

```{r}
new_element <- c(1, 10, 15)
```

In this case, this new element is a [vector](https://nickhaf.github.io/r_tutorial/qmd/data_structures/data_structures.html#vector), which is a one dimensional collection of values. The `c()` stands for combine, or concatenate, and is the basic function for building a vector out of single elements.

## Comparisons and Logical Operators

The boolean variables in R are `TRUE` and `FALSE`. Comparison operators return either `TRUE` or `FALSE`:

```{r}
1 < 2

# But:
2 < 1

```

These are the comparison operators you will typically use:

```{r, echo = FALSE}
dat_structs <- data.frame("Operator" = c("<", ">", "==", "!=", "<=", ">=", "%in%"),
                          "Description" = c("less than", "greater than", "equal to", "not equal to", "less or equal", "greater or equal", "part of")
)

knitr::kable(dat_structs, "pipe",
             col.names = c("Operator", "Description")
             ) 
```

Mainly we will use these logical operations to check which elements in a [vector](data_structures.qmd#vector) satisfy some requirements:

```{r}
# Build a vector of numbers ranging from 1 to 10
vec_num <- 1:10

# Check which of these numbers are smaller than 5
vec_num < 5
```

This will become important later on, when we want to subset vectors and data frames to extract only those values that satisfy some requirements we defined.

## %in%

The `%in%` operator is used to check for each element of its first argument if it is part of the second argument:

```{r}
c("Monica", "Rachel", "Barny") %in% c("Monica", "Rachel", "Ross", "Joey", "Phoebe", "Chandler")
```

## !

We can invert boolean values by using `!`:

```{r}
!TRUE

!(1 > 100)
```

## | ("or") and &("and")
We can also combine multiple logical operations by using `|` ("or") and/or `&` ("and"):

```{r}
TRUE & FALSE
TRUE | FALSE

(10 < 20 | "a" == "b")
(10 < 20 & "a" == "b")
!(10 < 20 & "a" == "b")

```

## Functions

Everything that **does** something in R is a [function](../functions/functions.qmd). A function call has the form: `functionname(argument1 = value, argument2 = value, ...)`. One basic example is the function that can calculate the square root:

```{r}
sqrt(4)
```

We can also assign the name of the function argument to our value. This is clearer, as we don't rely on the order of the function arguments:

```{r}
rep(4, 10)
```

will rep `4` `10` times. If we swap the arguments, the `10` will be repeated `4` times:

```{r}
rep(10, 4)
```

But if we specify which value belongs to which function argument, the order doesn't matter:

```{r}
rep(times = 10, x = 4)
```

How do we know which arguments a function has? By using the documentation:

## HELP!

One of the most important functions in R is the help-function `?`:

```{r}
?rep
```

will open the documentation for the function with the description of its usage, details about the arguments ... Take a look and become acquainted with the structure of the function documentation, it is an important tool!
